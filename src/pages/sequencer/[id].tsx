import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { Note, Sequence } from "@/server/types";
import { GetStaticPropsContext, GetStaticPropsResult } from "next";
import { GetNotes, GetSequence } from "@/database/calls";

type PageParams = {
	id: string;
};

type ContentPageProps = {
	sequence: Sequence;
	notes: Array<Note>;
};

export default function FromID({ sequence, notes }: ContentPageProps) {
	sequence = new Sequence(sequence);
	notes = notes.map((note) => {
		return new Note(note);
	});

	return (
		<>
			<Head>
				<title>Sequencer</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main}>
				<div>
					<button
						onClick={(e: any) => {
							console.log(sequence);
							console.log(notes);
						}}
					>
						Log Sequence and Notes
					</button>
				</div>
			</main>
		</>
	);
}

export async function getStaticPaths() {
	const ids = await fetch("http://localhost:3000/api/get_sequence_ids");

	const postFromServer: [{ id: string }] = await ids.json();
	return {
		paths: postFromServer.map((post) => {
			return {
				params: {
					id: post.id,
				},
			};
		}),
		fallback: false, // can also be true or 'blocking'
	};
}

export async function getStaticProps({
	params,
}: GetStaticPropsContext<PageParams>): Promise<
	GetStaticPropsResult<ContentPageProps>
> {
	try {
		const databaseSequence = await GetSequence((params as PageParams).id);
		const databaseNotes = await GetNotes((params as PageParams).id);

		if (
			!(
				databaseNotes instanceof Array<Note> &&
				databaseSequence instanceof Sequence
			)
		) {
			throw new Error("Notes or Sequence not found");
		}

		return {
			// Passed to the page component as props
			props: {
				sequence: JSON.parse(JSON.stringify(databaseSequence)),
				notes: JSON.parse(JSON.stringify(databaseNotes)),
			},
		};
	} catch (e) {
		console.error("error ", e);
		return {
			props: {
				sequence: JSON.parse(
					JSON.stringify(
						new Sequence({
							id: "",
							length: 0,
							bpm: 0,
							timeSignature: { numerator: 0, denominator: 0 },
						})
					)
				),
				notes: JSON.parse(JSON.stringify(new Array<Note>())),
			},
		};
	}
}
